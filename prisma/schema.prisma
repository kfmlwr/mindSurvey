// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    LEADER
    ADMIN
}

enum TeamRole {
    LEADER
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Team      Team[]
    Invite    Invite[]
}

model Team {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    ownerId   String

    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    invitations Invite[]
}

model Invite {
    id          String  @id @default(cuid())
    status      Status  @default(PENDING) // Fortschritt für das Ausfüllen des Fragebogens
    inviteToken String? @unique // optional, null nach Einlösung
    email       String

    teamId String
    team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? // optional, nur Owner sind über User verbunden

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Answer    Answer[]
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

enum Quadrant {
    BOSS
    SUPERSTAR
    COLABORATOR
    ANALYST
}

model Pairs {
    id          String            @id @default(cuid())
    translation PairTranslation[]
    answers     Answer[]

    display_order      Int
    adjective_positive String
    adjective_negative String

    quadrant        Quadrant
    authority_focus Boolean

    positive_x Float
    positive_y Float
    negative_x Float
    negative_y Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Response {
    POSITIVE
    NEGATIVE
}

enum Weight {
    LOW
    HIGH
}

model Answer {
    id String @id @default(cuid())

    pairId String
    pair   Pairs  @relation(fields: [pairId], references: [id], onDelete: Cascade)

    inviteId String
    invite   Invite @relation(fields: [inviteId], references: [id], onDelete: Cascade)

    weight   Weight
    response Response

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Language {
    DE
    FI
    SN
}

model PairTranslation {
    id String @id @default(cuid())

    pairId String
    pair   Pairs  @relation(fields: [pairId], references: [id], onDelete: Cascade)

    language Language

    adjective_positive String
    adjective_negative String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([pairId, language])
}

enum Status {
    PENDING
    COMPLETED
}
